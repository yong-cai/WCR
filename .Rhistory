library("devtools")
devtools::install_github("klutometis/roxygen")
getwd("parent_directory")
library(roxygen2)
setwd("parent_directory")
getwd()
creat("WCR")
create("WCR")
X <- rnorm(100); W <- rnorm(100); Y <- X + W + rnorm(100)
df <- data.frame(Y,X,W)
tilde <- model.matrix(X ~ W, df)
Xtilde <- model.matrix(X ~ W, df)
reg <- lm(Y~X+W, df)
?rep
rep_len(1:5, 20)
rep(1:5, each = 20)
subclust <- rep(1:20, each = 5)
subclust
require(compiler)
#-------------------------------------------------------------------------------
pre.wcpermtest_sign <- function(resids, clust, alpha){
#-----------------------------------------------------------------------------
# X-plain: helper function for worstcase permtest.
#          works differently from main version!!
#-----------------------------------------------------------------------------
# INPUTS: - resids: matrix of sub-cluster level residuals
#         - subclust: subcluster of each observation. should be nested in clust.
#         - clust: cluster of each observation.
#-----------------------------------------------------------------------------
# RETURNS: - pweak: proportion of perm distribution >= test stat
#          - pstrong: proportion of perm distribution > test stat
#          - phi_conservative: test which rejects when pweak < alpha. This
#            test rejects more than alpha
#          - phi_aggressive: test which rejects when pstrong < alpha
#          - phi_random: test which randomly rejects according to our formula
#            in case of tie
#-----------------------------------------------------------------------------
# resids <- case_s; clust <- clusttable[, 1]
K <- length(unique(clust))
J <- length(resids)
teststatval <- teststat(resids, clust)
# Compute permutation distribution
G <- random.G(J) # draw permutations
M <- dim(G)[2]
permdist <- matrix(0, M, 1)
for(g in 1:M){
gS <- resids * G[, g]
permdist[g, ] <- teststat(gS, clust)
}
# Compute return values
pweak <- mean(permdist >= teststatval)
pstrong <- mean(permdist > teststatval)
phi_conservative <- pweak < alpha
phi_aggressive <- pstrong < alpha
return(list(pweak = pweak, pstrong = pstrong, phi_conservative = phi_conservative,
phi_aggressive = phi_aggressive))
}
#-------------------------------------------------------------------------------
wcpermtest_sign <- cmpfun(pre.wcpermtest_sign);
#' Worst Cast Randomization Test
#'
#' This function implements the scalar version of the Worst Case Randomization test in Cai (2021)
#' @param Xtilde The covariate to be tested, after residualizing on the other variables.
#' @param resids Residual from the regression to be tested
#' @export
#' @examples
#' X <- rnorm(100); W <- rnorm(100); Y <- X + W + rnorm(100)
#' clust <- rep(1:5, each = 20)
#' subclust <- rep(1:20, each = 5)
#' df <- data.frame(Y,X,W)
#' Xtilde <- model.matrix(X ~ W, df)
#' reg <- lm(Y~X+W, df)
#' wcr_test(Xtilde, reg$residuals, subclust, clust, 0.05)
#-------------------------------------------------------------------------------
wcr_test  <- function(Xtilde, resids, subclust, clust, alpha){
#-----------------------------------------------------------------------------
# X-plain: Find the worse case p-value
#-----------------------------------------------------------------------------
# INPUTS: - X and residuals for forming test
#         - subclusters to be tested; clusters to which subclusters belong
#         - level of significance alpha
#-----------------------------------------------------------------------------
# RETURNS: - worst case p-value and test result, naive test p-values and results
#-----------------------------------------------------------------------------
# X <- Xtilde; resids <- reg$residuals; subclust <- data$subclust; clust <- data$clust
# X <- data$col1_Xtilde; resids <- data$col1_resid; subclust <- data$country_match_fe; clust <- data$country
X <- Xtilde
X2 <- X^2
XU <- X*resids
#d <- dim(resids)[2]
K <- length(unique(clust))
clustnames <- unique(clust)
J <- length(unique(subclust))
subclustnames <- unique(subclust)
newclust <- array(0, length(clust))
for (k in 1:K){
newclust[clust == clustnames[k]] <- k
}
clust <- newclust
clustnames <- 1:K
newsubclust <- array(0, length(subclust))
for (k in 1:J){
newsubclust[subclust == subclustnames[k]] <- k
}
subclust <- newsubclust
subclustnames <- 1:J
# Check that subclust is nested in clust; generate clust table.
clusttable <- matrix(0, J, 4)
for (j in 1:J){
if(length(unique(clust[subclust == subclustnames[j]])) > 1){
stop("Subclust not nested in clust.")
}
clusttable[j, 1] <- unique(clust[subclust == subclustnames[j]])[1]
clusttable[j, 2] <- sum(X2[subclust == subclustnames[j]])
clusttable[j, 3] <- sum(XU[subclust == subclustnames[j]])
}
clusttable[clusttable[, 2]!=0, 4] <- clusttable[clusttable[, 2]!=0, 3]/clusttable[clusttable[, 2]!=0, 2] # XU/X2 set to 0 if X2 = 0
#clustmed <- (1:K)*0
clustmedmax <- (1:K)*0
clustmedmin <- (1:K)*0
for (k in 1:K){
#clustmed[k] <- median(clusttable[clusttable[, 1]==k, 4])
clustmedmin[k] <- quantile(clusttable[clusttable[, 1]==clustnames[k], 4], probs = c(0.5), type = 1)
clustmedmax[k] <- -quantile(-clusttable[clusttable[, 1]==clustnames[k], 4], probs = c(0.5), type = 1)
}
# Sort clusttable by sensitivity to beta
clusttable <- clusttable[order(clusttable[,4],decreasing=TRUE),]
# Identify index of terms which are sensitive to
sensitive <- (1:J)[(clusttable[, 4] <= max(clustmedmax) &  clusttable[, 4] >= min(clustmedmin))]
pvals <- sensitive*0
pcount <- 1
for (s in sensitive){
if (clusttable[s, 4] == 0){
next
}
case_s <- c(rep(1, s), rep(-1, J-s))
case_s[clusttable[, 4] == 0] <- 0
pvals[pcount] <- wcpermtest_sign(case_s, clusttable[, 1], alpha)$pweak
pcount <- pcount + 1
}
case_naive <- sign(clusttable[, 4])
pnaive <- wcpermtest_sign(case_naive, clusttable[, 1], alpha)$pweak
wctest <- (max(pvals) <= alpha)
naivetest <- (pnaive <= alpha)
return(list("pval" = max(pvals), "testval" = wctest, "naivepval" = pnaive, "naivetestval" = naivetest))
}
#-------------------------------------------------------------------------------
random.G  <- function(q,B=1000){
#-----------------------------------------------------------------------------
# X-plain: Computes the group transformations for the randomization test
#-----------------------------------------------------------------------------
# INPUTS: - q: the dimension of the data (q point estimators)
#         - B: the number of random draws if q>10.
#-----------------------------------------------------------------------------
# RETURNS: - G: a B \times q matrix.
#-----------------------------------------------------------------------------
if(q<11){e   <- c(1,-1); B<-2^q;
perm<-t(expand.grid(rep(list(e),q)));
}
# Draw B transformations from G otherwise
else {perm <- matrix(2*((runif(q*B)>1/2)-1/2),q,B);
}
return(perm)
}
#-------------------------------------------------------------------------------
wcr_test(Xtilde, reg$residuals, subclust, clust, 0.05)
clust <- rep(1:5, each = 20)
wcr_test(Xtilde, reg$residuals, subclust, clust, 0.05)
require(compiler)
#-------------------------------------------------------------------------------
pre.wcpermtest_sign <- function(resids, clust, alpha){
#-----------------------------------------------------------------------------
# X-plain: helper function for worstcase permtest.
#          works differently from main version!!
#-----------------------------------------------------------------------------
# INPUTS: - resids: matrix of sub-cluster level residuals
#         - subclust: subcluster of each observation. should be nested in clust.
#         - clust: cluster of each observation.
#-----------------------------------------------------------------------------
# RETURNS: - pweak: proportion of perm distribution >= test stat
#          - pstrong: proportion of perm distribution > test stat
#          - phi_conservative: test which rejects when pweak < alpha. This
#            test rejects more than alpha
#          - phi_aggressive: test which rejects when pstrong < alpha
#          - phi_random: test which randomly rejects according to our formula
#            in case of tie
#-----------------------------------------------------------------------------
# resids <- case_s; clust <- clusttable[, 1]
K <- length(unique(clust))
J <- length(resids)
teststatval <- teststat(resids, clust)
# Compute permutation distribution
G <- random.G(J) # draw permutations
M <- dim(G)[2]
permdist <- matrix(0, M, 1)
for(g in 1:M){
gS <- resids * G[, g]
permdist[g, ] <- teststat(gS, clust)
}
# Compute return values
pweak <- mean(permdist >= teststatval)
pstrong <- mean(permdist > teststatval)
phi_conservative <- pweak < alpha
phi_aggressive <- pstrong < alpha
return(list(pweak = pweak, pstrong = pstrong, phi_conservative = phi_conservative,
phi_aggressive = phi_aggressive))
}
#-------------------------------------------------------------------------------
wcpermtest_sign <- cmpfun(pre.wcpermtest_sign);
#' Worst Cast Randomization Test
#'
#' This function implements the scalar version of the Worst Case Randomization test in Cai (2021)
#' @param Xtilde The covariate to be tested, after residualizing on the other variables.
#' @param resids Residual from the regression to be tested
#' @export
#' @examples
#' X <- rnorm(100); W <- rnorm(100); Y <- X + W + rnorm(100)
#' clust <- rep(1:5, each = 20)
#' subclust <- rep(1:20, each = 5)
#' df <- data.frame(Y,X,W)
#' Xtilde <- model.matrix(X ~ W, df)
#' reg <- lm(Y~X+W, df)
#' wcr_test(Xtilde, reg$residuals, subclust, clust, 0.05)
#-------------------------------------------------------------------------------
wcr_test  <- function(Xtilde, resids, subclust, clust, alpha){
#-----------------------------------------------------------------------------
# X-plain: Find the worse case p-value
#-----------------------------------------------------------------------------
# INPUTS: - X and residuals for forming test
#         - subclusters to be tested; clusters to which subclusters belong
#         - level of significance alpha
#-----------------------------------------------------------------------------
# RETURNS: - worst case p-value and test result, naive test p-values and results
#-----------------------------------------------------------------------------
# X <- Xtilde; resids <- reg$residuals; subclust <- data$subclust; clust <- data$clust
# X <- data$col1_Xtilde; resids <- data$col1_resid; subclust <- data$country_match_fe; clust <- data$country
X <- Xtilde
X2 <- X^2
XU <- X*resids
#d <- dim(resids)[2]
K <- length(unique(clust))
clustnames <- unique(clust)
J <- length(unique(subclust))
subclustnames <- unique(subclust)
newclust <- array(0, length(clust))
for (k in 1:K){
newclust[clust == clustnames[k]] <- k
}
clust <- newclust
clustnames <- 1:K
newsubclust <- array(0, length(subclust))
for (k in 1:J){
newsubclust[subclust == subclustnames[k]] <- k
}
subclust <- newsubclust
subclustnames <- 1:J
# Check that subclust is nested in clust; generate clust table.
clusttable <- matrix(0, J, 4)
for (j in 1:J){
if(length(unique(clust[subclust == subclustnames[j]])) > 1){
stop("Subclust not nested in clust.")
}
clusttable[j, 1] <- unique(clust[subclust == subclustnames[j]])[1]
clusttable[j, 2] <- sum(X2[subclust == subclustnames[j]])
clusttable[j, 3] <- sum(XU[subclust == subclustnames[j]])
}
clusttable[clusttable[, 2]!=0, 4] <- clusttable[clusttable[, 2]!=0, 3]/clusttable[clusttable[, 2]!=0, 2] # XU/X2 set to 0 if X2 = 0
#clustmed <- (1:K)*0
clustmedmax <- (1:K)*0
clustmedmin <- (1:K)*0
for (k in 1:K){
#clustmed[k] <- median(clusttable[clusttable[, 1]==k, 4])
clustmedmin[k] <- quantile(clusttable[clusttable[, 1]==clustnames[k], 4], probs = c(0.5), type = 1)
clustmedmax[k] <- -quantile(-clusttable[clusttable[, 1]==clustnames[k], 4], probs = c(0.5), type = 1)
}
# Sort clusttable by sensitivity to beta
clusttable <- clusttable[order(clusttable[,4],decreasing=TRUE),]
# Identify index of terms which are sensitive to
sensitive <- (1:J)[(clusttable[, 4] <= max(clustmedmax) &  clusttable[, 4] >= min(clustmedmin))]
pvals <- sensitive*0
pcount <- 1
for (s in sensitive){
if (clusttable[s, 4] == 0){
next
}
case_s <- c(rep(1, s), rep(-1, J-s))
case_s[clusttable[, 4] == 0] <- 0
pvals[pcount] <- wcpermtest_sign(case_s, clusttable[, 1], alpha)$pweak
pcount <- pcount + 1
}
case_naive <- sign(clusttable[, 4])
pnaive <- wcpermtest_sign(case_naive, clusttable[, 1], alpha)$pweak
wctest <- (max(pvals) <= alpha)
naivetest <- (pnaive <= alpha)
return(list("pval" = max(pvals), "testval" = wctest, "naivepval" = pnaive, "naivetestval" = naivetest))
}
#-------------------------------------------------------------------------------
random.G  <- function(q,B=1000){
#-----------------------------------------------------------------------------
# X-plain: Computes the group transformations for the randomization test
#-----------------------------------------------------------------------------
# INPUTS: - q: the dimension of the data (q point estimators)
#         - B: the number of random draws if q>10.
#-----------------------------------------------------------------------------
# RETURNS: - G: a B \times q matrix.
#-----------------------------------------------------------------------------
if(q<11){e   <- c(1,-1); B<-2^q;
perm<-t(expand.grid(rep(list(e),q)));
}
# Draw B transformations from G otherwise
else {perm <- matrix(2*((runif(q*B)>1/2)-1/2),q,B);
}
return(perm)
}
#-------------------------------------------------------------------------------
pre.teststat  <- function(Sn, clusttable){
#-----------------------------------------------------------------------------
# X-plain: Compute test statistic
#-----------------------------------------------------------------------------
# INPUTS: - Sn: signs of residuals
#         - clusttable: table with which to compute test statistic
#-----------------------------------------------------------------------------
# RETURNS: - teststat
#-----------------------------------------------------------------------------
K <- length(unique(clusttable))
clustnames <- unique(clusttable)
clustresid <- matrix(0, K, 1)
for(k in 1:K){
clustresid[k] <- abs(sum(Sn[clusttable == clustnames[k]]))
}
return(sum(clustresid))
}
#-------------------------------------------------------------------------------
teststat <- cmpfun(pre.teststat);
#-------------------------------------------------------------------------------
wcr_test(Xtilde, reg$residuals, subclust, clust, 0.05)
setwd("./WCR")
document()
rm(ls = list())
rm(list = ls())
library(roxygen2)
getwd9
getwd()
document()
setwd("..")
install("WCR")
install("WCR")
install("WCR")
install("WCR")
install("WCR")
install("WCR")
install("WCR")
library("WCR")
?wcr_test
install("WCR")
library("WCR")
?wcr_test
getwd()
install("WCR")
library("devtools")
library(roxygen2)
install("WCR")
library("WCR")
?wcr_test
library("WCR")
?wcr_test
install("WCR")
library(roxygen2)
library("devtools")
library(roxygen2)
install("WCR")
library("WCR")
?wcr_test
library("WCR")
install("WCR")
library("devtools")
library(roxygen2)
install("WCR")
library("WCR")
?wcr_test
library("WCR")
?wcr_test
library("devtools")
library(roxygen2)
install("WCR")
library("WCR")
?wcr_test
?wcr_test
library("WCR")
?wcr_test
remove.packages("WCR", lib="~/R/win-library/4.0")
library("devtools")
library(roxygen2)
install("WCR")
setwd("./WCR")
document()
